<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数电笔记1</title>
      <link href="/2025/01/22/%E7%AC%94%E8%AE%B0/%E6%95%B0%E7%94%B5/%E6%95%B0%E7%94%B5%E7%AC%94%E8%AE%B01/"/>
      <url>/2025/01/22/%E7%AC%94%E8%AE%B0/%E6%95%B0%E7%94%B5/%E6%95%B0%E7%94%B5%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h2 id="信息与编码"><a href="#信息与编码" class="headerlink" title="信息与编码"></a>信息与编码</h2>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为社会添砖java1</title>
      <link href="/2025/01/19/%E7%AC%94%E8%AE%B0/java/%E9%BB%91%E9%A9%ACjava1/"/>
      <url>/2025/01/19/%E7%AC%94%E8%AE%B0/java/%E9%BB%91%E9%A9%ACjava1/</url>
      
        <content type="html"><![CDATA[<h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><h3 id="cmd学习"><a href="#cmd学习" class="headerlink" title="cmd学习"></a>cmd学习</h3><p>使用盘符加冒号可以直接切换<br>例如E:<br>就能直接切换到E盘<br>然后再cd code\works...<br><img src="https://pic1.imgdb.cn/item/678cc3c9d0e0a243d4f5a49f.png" alt="">  </p><p>dir能展示所有文件夹</p><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><p>在列表中的顺序决定了搜索的顺序</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20250116训练题解</title>
      <link href="/2025/01/16/%E9%A2%98%E8%A7%A3/20250116%E8%AE%AD%E7%BB%83%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/01/16/%E9%A2%98%E8%A7%A3/20250116%E8%AE%AD%E7%BB%83%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>cf 1466B、822A、1909A、2055A</p><h2 id="第一题-1466B"><a href="#第一题-1466B" class="headerlink" title="第一题 1466B"></a>第一题 1466B</h2><p><a href="https://codeforces.com/contest/1466/problem/B">Last minute enhancements</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>一首曲子包含 (n) 个音符，我们将这些音符视为<strong>正整数</strong>。歌曲的<strong>多样性</strong>定义为其中<strong>不同音符的个数</strong>。作为音乐的守护神，尤特尔佩（Euterpe）看护着作曲家，并在他们创作新旋律的过程中给予指引。她决定帮助阿西纳乌斯，让他的歌曲变得更加丰富多样。</p><p>作为一位小神，尤特尔佩不能随意修改歌曲。相反，对于歌曲中的每个音符，她可以选择保持其不变，或者将其<strong>增加 1</strong>。</p><p>给定表示歌曲音符的整数序列，找出歌曲可以达到的最大多样性。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h4><p>输入包含多个测试用例。</p><ul><li>第一行是一个整数 $t$（$1 \leq t \leq 10,000$）——表示测试用例的数量。</li><li>接下来的 $t$ 个测试用例，每个测试用例由两行描述：<ul><li>第一行是一个整数 $n$（$1 \leq n \leq 100,000$）——表示歌曲的长度。</li><li>第二行是一个长度为 $n$ 的整数序列 $x_1, x_2, \ldots, x_n$（$1 \leq x_1 \leq x_2 \leq \ldots \leq x_n \leq 2n$）——描述歌曲的音符。</li></ul></li></ul><p>保证所有测试用例中 $n$ 的总和不超过 $100,000$。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h4><p>对于每个测试用例，输出一行，包含一个整数，表示歌曲可以达到的最大多样性（即最终序列中不同元素的最大个数）。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>简单来说就是怎么才能让不同的数字的数量最大  </p><p>第一种方法：由于已知xn是排序的，所以从前往后遍历，当一个数至少有两个时，把1个以外的其他数全部加1，这样即使下一个数跟现在这个数加一后相等，也可以继续把下一个数加一<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-type">int</span> now = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]==now)a[i]++;<br>        <span class="hljs-keyword">if</span>(a[i]==a[i<span class="hljs-number">+1</span>])<br>        &#123;<br>            now=a[i];<br>            a[i<span class="hljs-number">+1</span>]++;<br>        &#125;<br>        <span class="hljs-comment">// cout&lt;&lt;a[i];</span><br>    &#125;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n ; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i] != a[i + <span class="hljs-number">1</span>])<br>            cnt++;<br>            <span class="hljs-comment">// cout&lt;&lt;a[i];</span><br>    &#125;<br>    cout &lt;&lt; cnt;<br>&#125;<br></code></pre></td></tr></table></figure><br>第二种方法：使用数据结构set，进行更便捷的去重管理，最后通过获取set的大小，来得知最大能放几个。同时对于已有的，那么进行+1然后放入。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    set&lt;<span class="hljs-type">int</span>&gt; s;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">count</span>(x))<br>        &#123;<br>            x++;<br>        &#125;<br>        s.<span class="hljs-built_in">insert</span>(x);<br>    &#125;<br>    cout &lt;&lt; s.<span class="hljs-built_in">size</span>();<br>&#125;<br></code></pre></td></tr></table></figure><br><strong>trick：</strong> 使用set进行去重</p><h2 id="第二题-822A"><a href="#第二题-822A" class="headerlink" title="第二题 822A"></a>第二题 822A</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><a href="https://codeforces.com/contest/822/problem/A">I’m bored with life</a>  </p><p>选择两个整数 $A$ 和 $B$，然后计算它们的“阶乘”的最大公约数（GCD）。形式上，这个黑客想要计算 $GCD(A!, B!)$。众所周知，整数 $x$ 的阶乘是所有小于等于 $x$ 的正整数的乘积。因此，$x! = 1 \cdot 2 \cdot 3 \cdot \ldots \cdot (x-1) \cdot x$。例如，$4! = 1 \cdot 2 \cdot 3 \cdot 4 = 24$。回顾一下，$GCD(x, y)$ 是同时整除 $x$ 和 $y$ 的最大正整数。</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a><strong>输入</strong></h4><p>输入包含一行两个整数 $A$ 和 $B$ ($1 \leq A, B \leq 10^9, \min(A, B) \leq 12$)。</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a><strong>输出</strong></h4><p>输出一个整数，表示 $A!$ 和 $B!$ 的最大公约数。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>可以发现，两个数的阶乘的最大公约数，其实就是小的那个数的阶乘。<br>例如，$4! = 1 \cdot 2 \cdot 3 \cdot 4 = 24$ 和 $3! = 1 \cdot 2 \cdot 3 = 6$，<br>因为前面的部分都是重复的，$4! = 24 = 3! \cdot 4$。</p><p>所以只需要求出小的那个数的阶乘即可。同时由题目的输入可知，小的那个数不会超过12。那么直接暴力求解即可<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ll <span class="hljs-title">f</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll y=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ll i =<span class="hljs-number">1</span>;i&lt;=x;i++)<br>    &#123;<br>        y*=i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll a,b;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    cout&lt;&lt;<span class="hljs-built_in">f</span>(<span class="hljs-built_in">min</span>(a,b));<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="第三题-1909A"><a href="#第三题-1909A" class="headerlink" title="第三题 1909A"></a>第三题 1909A</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><a href="https://codeforces.com/contest/1909/problem/A">Distinct Buttons</a>  </p><p>你位于无限坐标平面上的点 $(0, 0)$。你有一个控制器，控制器上有 4 个按钮，每个按钮可以执行以下操作之一：</p><ul><li>$\texttt{U}$：从 $(x, y)$ 移动到 $(x, y+1)$；</li><li>$\texttt{R}$：从 $(x, y)$ 移动到 $(x+1, y)$；</li><li>$\texttt{D}$：从 $(x, y)$ 移动到 $(x, y-1)$；</li><li>$\texttt{L}$：从 $(x, y)$ 移动到 $(x-1, y)$。</li></ul><p>不幸的是，控制器坏了。如果你按下所有 4 个按钮（无论顺序如何），控制器将停止工作。这意味着，在整个旅程中，你最多只能按下 3 个不同的按钮（可以按任意次数，任意顺序）。</p><p>平面上有 $n$ 个特殊点，坐标为 $(x_i, y_i)$。</p><p>你能在不坏掉控制器的情况下，访问所有这些特殊点（顺序可以任意）吗？</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>题目大意是，四个方向只能选三个，然后在这三个方向上可以任意移动。</p><h4 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h4><p>所有点必须成递增序列，基本以一条线的趋势递增。<br>错误点在于没有考虑到 <strong>三个方向上任意移动</strong> 的条件，同时以一条线的趋势增长实际上只考虑到两个方向。</p><h4 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h4><p>由于有三个方向，那么其中两个方向一定是相向的，因此可以在该轴上任意移动，而另一个方向决定了整体的<strong>不可回头</strong>方向，换句话说，只要所有点，全都在x-y轴中任意一条的一侧，那么就可以访问所有点。<br>移动形式如下图<br><img src="https://pic1.imgdb.cn/item/67890320d0e0a243d4f4e70c.png" alt="移动实例"><br>图中为y轴正负方向+x轴正方向<br>做法为：将读入的xy坐标，进行位置判断。<br>最后，如果只存在三个方向，那么就yes<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    vector&lt;<span class="hljs-type">bool</span>&gt;<span class="hljs-built_in">a</span>(<span class="hljs-number">4</span>,<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x,y;<br>        cin&gt;&gt;x&gt;&gt;y;<br>        <span class="hljs-comment">//判断位置</span><br>        <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">0</span>)a[<span class="hljs-number">0</span>]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>) a[<span class="hljs-number">1</span>]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(y&gt;<span class="hljs-number">0</span>)a[<span class="hljs-number">2</span>]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(y&lt;<span class="hljs-number">0</span>)a[<span class="hljs-number">3</span>]=<span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i])cnt++;<br>    &#125;<br>    <span class="hljs-comment">// cout&lt;&lt;cnt;</span><br>    <span class="hljs-keyword">if</span>(cnt!=<span class="hljs-number">4</span>)cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><strong>好的trick</strong> 使用bool数组进行状态判断</p><h2 id="第四题-2055A"><a href="#第四题-2055A" class="headerlink" title="第四题 2055A"></a>第四题 2055A</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p><a href="https://codeforces.com/contest/2055/problem/A">two frogs</a></p><p>有一排共 $n$ 个睡莲叶，从左到右依次编号为 $1$ 到 $n$。青蛙 Alice 和青蛙 Bob 最初分别停留在不同的睡莲叶 $a$ 和 $b$ 上。他们轮流跳跃，Alice 先行动。</p><p>在自己的回合中，青蛙可以向左或向右跳一步，只要目标睡莲叶存在即可。例如，在 Alice 的第一次行动时，她可以选择跳到 $a-1$ 或 $a+1$，前提是这些睡莲叶在有效范围内。需要注意的是，每只青蛙在自己的回合<strong>必须</strong>跳跃，不能停留在原地不动。</p><p>然而，以下限制条件需要满足：</p><ul><li>两只青蛙不能占据同一片睡莲叶。这意味着 Alice 不能跳到 Bob 当前所在的那片睡莲叶上，反之亦然。  </li><li>如果轮到某只青蛙行动，却无法做出有效跳跃，则该青蛙输掉游戏，另一只青蛙获胜。</li></ul><p>请判断 Alice 是否能确保在双方都采用最优策略的情况下赢得游戏。可以证明，如果双方都以最优策略行动，游戏会在有限步数内结束。</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><h4 id="错误思路-1"><a href="#错误思路-1" class="headerlink" title="错误思路"></a>错误思路</h4><p>判断两只青蛙到边界的距离，其中长的获胜<br>当时完全没有想出应该怎么做，因为认为存在相向而行和各自向边界行走的两种情况，不知道怎么判断。<br>这种错误实际上源于<strong>题目理解有误</strong>，并不是走过了就不能走了，只是不能到另一只所在的地方</p><h4 id="正确思路-1"><a href="#正确思路-1" class="headerlink" title="正确思路"></a>正确思路</h4><p>由于不存在走过了就不能走的情况，所以游戏结束的情况只能是，一只青蛙挤压了另一只青蛙的空间，也就是追及问题。<br><strong>什么情况下一只蛙会被挤压空间？</strong> 轮到他走了，但他的一边已经有蛙了.如下图5和6的情况（此时轮到5走）<br><img src="https://pic1.imgdb.cn/item/67890718d0e0a243d4f4e7f8.png" alt=""><br>那么再往前一步，也就是下图的情况<br><img src="https://pic1.imgdb.cn/item/67890790d0e0a243d4f4e806.png" alt=""><br>轮到b走，且此时处于7，要往左走，就会形成挤压。<br>而下图的情况：<br><img src="https://pic1.imgdb.cn/item/67890875d0e0a243d4f4e823.png" alt=""><br>a先走向右到6，接着b向左到7，此时对a形成挤压。<br>由于alice先走，那么就可以通过上图的情况，推广到<br>如果ab中间的区域为偶，那么就会对先走的形成挤压，因为区域被填满的最后一步会是b走的。<br>如果ab中间的区域为奇，那么b走完后，a还能再走一步，从而形成对b的挤压。<br>ab中间的区域为偶，说明ab同奇偶，为奇，说明ab不同奇偶<br>所以只需要判断ab的奇偶性即可<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,a,b;<br>    cin&gt;&gt;n&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-keyword">if</span>(a%<span class="hljs-number">2</span>==b%<span class="hljs-number">2</span>)cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>; <br>&#125;<br></code></pre></td></tr></table></figure><br><strong>好的trick:</strong> 奇偶性</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20250112训练题解</title>
      <link href="/2025/01/12/%E9%A2%98%E8%A7%A3/20250112%E8%AE%AD%E7%BB%83%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/01/12/%E9%A2%98%E8%A7%A3/20250112%E8%AE%AD%E7%BB%83%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>牛客周赛76的A-D，以及cf 1000分 2057B</p><h2 id="第一题-牛客周赛76A"><a href="#第一题-牛客周赛76A" class="headerlink" title="第一题 牛客周赛76A"></a>第一题 牛客周赛76A</h2><p><a href="https://ac.nowcoder.com/acm/contest/99990/A">小红出题</a></p><p>小红每周一到周五上班，工作日每天都要出 $3$ 道题目。<br>已知小红入职当天为星期一，并且已经在职 $n$ 天。<br>请问她总共出了几道题目？</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>已知入职日为周一，那么总天数一直减，直到小于7，同时记录减的次数<br>如果刚好等于6，那么再减去一次，<br>然后用记录的次数×5×3+剩余的日子*3即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-type">int</span> a=n,cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(a&gt;=<span class="hljs-number">7</span>)<br>&#123;<br>    a-=<span class="hljs-number">7</span>;<br>    cnt++;<br>&#125;<br><span class="hljs-keyword">if</span>(a==<span class="hljs-number">6</span>)a--;<br>cout&lt;&lt;cnt*<span class="hljs-number">5</span>*<span class="hljs-number">3</span>+a*<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h2 id="第二题-牛客周赛76B"><a href="#第二题-牛客周赛76B" class="headerlink" title="第二题 牛客周赛76B"></a>第二题 牛客周赛76B</h2><p><a href="https://ac.nowcoder.com/acm/contest/99990/B">串串香</a></p><p>给定一个长度为 $n$ ，仅包含小写字母的字符串 $s$ 。</p><p>请你构造出一个非空字符串 $t$ ，使得它在 $s$ 中作为<strong>子串</strong>出现的次数最多。</p><p>子串是指，从原字符串中连续截取一些字符，得到的新字符串。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>要意识到单个字符也可以视作子串，同时出现最多的子串，其中的每个字母出现的次数只会更多。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n;<br>string s;<br>cin&gt;&gt;n&gt;&gt;s;<br>map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt;mp;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>    mp[s[i]]++;<br>&#125;<br><span class="hljs-type">char</span> ans;<br><span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> i=<span class="hljs-string">&#x27;a&#x27;</span>;i&lt;=<span class="hljs-string">&#x27;z&#x27;</span>;i++)<br>&#123;<br>    <span class="hljs-keyword">if</span>(cnt&lt;mp[i])<br>    &#123;<br>        ans=i;<br>        cnt=mp[i];<br>    &#125;<br>&#125;<br>cout&lt;&lt;ans;    <br></code></pre></td></tr></table></figure><p>使用map记录每个字母出现的次数，然后得到一个最大的</p><h2 id="第三题-牛客周赛76C"><a href="#第三题-牛客周赛76C" class="headerlink" title="第三题 牛客周赛76C"></a>第三题 牛客周赛76C</h2><p><a href="https://ac.nowcoder.com/acm/contest/99990/C">小红的gcd</a></p><p>小红有一个长度为 $n$ 的数组，她希望数组元素之和越少越好。<br>她可以进行<strong>任意次</strong>操作，每次选择数组中的两个元素 $a_i$ 和 $a_j$ ，令 $a_i=a_j=\gcd(a_i,a_j)$ 。<br>所有操作结束后，请你输出<strong>最小</strong>的数组元素之和。</p><p><strong>输入：</strong><br>第一行有一个整数 $n\ (\ 1 \leq n \leq 10^5\ )$ 。<br>第二行有 $n$ 个整数 $a_i\ (\ 1 \leq a_i \leq 10^9\ )$ 。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>可以进行任意次操作，那么最后所有元素都会变成他们的联合gcd，求出这个联合gcd，然后乘n即可，要注意所有数字可能相同，且都为$10^9$,所以要开long long</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br>ll y=<span class="hljs-number">0</span>;<br>cin&gt;&gt;y;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)<br>&#123;<br>    ll x;<br>    cin&gt;&gt;x;<br>    y=<span class="hljs-built_in">gcd</span>(x,y);<br>&#125;<br>cout&lt;&lt;n*y;<br></code></pre></td></tr></table></figure><p>gcd直接使用库函数</p><h2 id="第四题-牛客周赛76D"><a href="#第四题-牛客周赛76D" class="headerlink" title="第四题 牛客周赛76D"></a>第四题 牛客周赛76D</h2><p><a href="https://ac.nowcoder.com/acm/contest/99990/D">奇偶调整</a></p><p>小红有一个长度为 $n$ 的数组 $a$ ，第 $i$ 个元素为 $a_i$ 。<br>小红可以执行两种操作，操作内容如下：<br>1.选择一个偶数元素 $a_i$ ，令 $a_i=a_i/2$ 。<br>2.选择一个奇数元素 $a_i$ ，令 $a_i=a_i \oplus 1$ 。<br>其中，操作 $1$ 最多执行 $m$ 次，操作 $2$ 最多执行 $k$ 次。<br>小红想最小化数组元素之和，请你输出这个值。<br>$\oplus$ 代表按位异或。</p><p><strong>输入：</strong><br>第一行有三个整数 $n\ (\ 1 \leq n \leq 10^5\ )$ ，$m\ (\ 1 \leq m \leq 10^9\ )$ 和 $k\ (\ 1 \leq k \leq 10^9\ )$ 。<br>第二行有 $n$ 个整数 $a_i\ (\ 1 \leq a_i \leq 10^9\ )$ 。</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>可以通过简单的二进制计算知道对奇数异或1，实际上就是减去1。想要最小化数组元素之和，那么就需要对更大的数字进行除2，这样的收益是远高于对小的数字进行操作的。<br>由此我产生了思路一，每次操作后都对数组进行排序。由此能每次获得一个最大的数。<br>很明显，由于每次排序为nlogn，所以会tle。<br>思路二，由于需要最大的，那么使用大顶堆，也就是priority_queue。其每次插入和删除均为logn<br>对最大的进行操作，对于奇数来说，需要把他变为偶数，并k—，对于偶数来说，需要把他除2，然后m—<br>时间复杂度为O((n+m+k)log(n+m+k))，nlogn<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,k;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    priority_queue&lt;<span class="hljs-type">int</span>&gt;a;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin&gt;&gt;x;<br>        a.<span class="hljs-built_in">push</span>(x);<span class="hljs-comment">//建堆</span><br>    &#125;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!a.<span class="hljs-built_in">empty</span>())<span class="hljs-comment">//当堆非空</span><br>    &#123;<br>        <span class="hljs-type">int</span> x=a.<span class="hljs-built_in">top</span>();<br>        a.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//对最大的进行操作</span><br>        <span class="hljs-keyword">if</span>(x%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(k)<br>            &#123;<br>                k--;<br>                x--;<br>                a.<span class="hljs-built_in">push</span>(x);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ans+=x;<span class="hljs-comment">//当操作次数不足时，加入答案中</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x!=<span class="hljs-number">0</span>)<span class="hljs-comment">//不是奇数就是偶数，同时偶数中要排除0</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(m)<br>            &#123;<br>                m--;<br>                x/=<span class="hljs-number">2</span>;<br>                a.<span class="hljs-built_in">push</span>(x);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ans+=x;<span class="hljs-comment">//当操作次数不足时，加入答案中</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>&#125;<br></code></pre></td></tr></table></figure><br><strong>好的trick为：</strong> 使用优先队列（大顶堆）来快速获取最大元素</p><h3 id="错误点"><a href="#错误点" class="headerlink" title="错误点"></a>错误点</h3><p>错误代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,k;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    priority_queue&lt;<span class="hljs-type">int</span>&gt;a;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin&gt;&gt;x;<br>        a.<span class="hljs-built_in">push</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m&gt;<span class="hljs-number">0</span>&amp;&amp;k&gt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> x=a.<span class="hljs-built_in">top</span>();<br>        a.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span>(x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<br>        &#123;<br>            x/=<span class="hljs-number">2</span>;<br>            m--;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            x--;<br>            x/=<span class="hljs-number">2</span>;<br>            m--;<br>            k--;<br>        &#125;<br>        a.<span class="hljs-built_in">push</span>(x);<br>    &#125;<br>    <span class="hljs-comment">// while(m&gt;0&amp;&amp;k==0)</span><br>    <span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">//      </span><br>    <span class="hljs-comment">// &#125;</span><br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a.<span class="hljs-built_in">size</span>()!=<span class="hljs-number">0</span>)<br>    &#123;<br>        ll x=a.<span class="hljs-built_in">top</span>();<br>        a.<span class="hljs-built_in">pop</span>();<br>        ans+=x;<br>    &#125;<br>    cout&lt;&lt;ans-k;<br>&#125;<br></code></pre></td></tr></table></figure><br>不应该以m和k作为主循环的判断条件，当时想的是：以m和k为主体，去处理容器中的东西。那么对于一个东西，如果他是偶数或者奇数，进行对应的处理后m和k会发生变化，那么当m和k到什么情况下循环应该结束，同时<strong>不应该把两次操作当成一次进行</strong><br>错误在于，没有考虑到他们单独有剩的情况。<br>例如<br>样例<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">5 2 1<br>5 4 3<br></code></pre></td></tr></table></figure><br>错误代码：5变为4，然后除2，变为2 4 3，由于k为0，退出，得到的答案为9<br>正解：5变为4，然后除2，序列为2 4 3，然后对4除2，序列变为2 2 3得到答案为7</p><p>正解的整体思路在于：<br>把奇数变为偶数（消耗k）和把偶数除2（消耗m）都作为对数据的处理手段，当次数足时，对数据处理完会重新push进去，不足时不会进行push。<br><strong>操作分开进行</strong></p><h2 id="第五题-CF-2057B"><a href="#第五题-CF-2057B" class="headerlink" title="第五题 CF-2057B"></a>第五题 CF-2057B</h2><p><a href="https://codeforces.com/problemset/problem/2057/B">大猩猩与考试</a>  </p><p>由于“T世代”高年级班级教师短缺，决定由一只庞大的雄性大猩猩为学生们进行考试。然而，这并非易事；为了证明其能力，他需要解决以下问题。</p><p>对于一个数组 $b$，我们定义函数 $f(b)$ 为将数组 $b$ 清空所需的最少操作次数。允许的操作如下：</p><p>选择两个整数 $l$ 和 $r$，满足 $l \le r$，并令 $x$ 为子数组 $b<em>l, b</em>{l+1}, \ldots, b<em>r$ 中的最小值，即 $x = \min(b_l, b</em>{l+1}, \ldots, b_r)$；<br>从数组中删除所有满足 $l \le i \le r$ 且 $b_i = x$ 的元素，这些被删除的元素将从数组中移除，数组的索引将重新编号。<br>现在，给定一个长度为 $n$ 的数组 $a$ 和一个整数 $k$。你最多可以进行 $k$ 次操作，每次操作可以选择任意一个索引 $i$（$1 \le i \le n$）和任意一个整数 $p$，并将 $a_i$ 替换为 $p$。</p><p>大猩猩希望最小化在进行最多 $k$ 次替换操作后，函数 $f(a)$ 的值。请帮助他确定在进行这些替换操作后，可以达到的最小值 $f(a)$。</p><p><strong>输入</strong><br>输入包含多个测试用例。<br>第一行包含一个整数 $t$ ($1 \le t \le 10^4$) — 测试用例的数量。<br>接下来的每组测试用例包含两行：<br>第一行包含两个整数 $n$ 和 $k$ ($1 \le n \le 10^5$, $0 \le k \le n$) — 数组 $a$ 的长度和最多允许的替换次数。<br>第二行包含 $n$ 个整数 $a_1, a_2, \ldots, a_n$ ($1 \le a_i \le 10^9$) — 数组 $a$ 的元素。<br>保证 所有测试用例中，数组长度 $n$ 的总和不超过 $10^5$。</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>很明显就能发现，进行f(b)操作时，其次数（值）实际上等于数组中有多少不同元素，因为每次都能完全删除同一个数，即使规定了删除的是最小的，但最小的被删了，就会出现新的最小，所以最后会全部删完，删的次数也就是有多少不同的数。<br>所以最小化f(b)实际上就要追求让元素种类数最少<br>进行k次操作，每次把一个ai变成p<br>所以我们要用k次操作，把同种元素数最少的优先去掉(因为更容易去掉)<br>什么是同种元素数？假设有序列<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1 2 3 3 4 4 4<br></code></pre></td></tr></table></figure><br>1有1个，2有1个，3有2个，4有3个<br>所以我们应该优先去掉1和2，然后3最后4（也就是要按照数量升序）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    vector&lt;ll&gt;<span class="hljs-built_in">a</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;x:a)cin&gt;&gt;x;<br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br>    vector&lt;<span class="hljs-type">int</span>&gt;cnt=&#123;<span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]==a[i<span class="hljs-number">+1</span>])<br>        &#123;<br>            cnt.<span class="hljs-built_in">back</span>()++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cnt.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(cnt.<span class="hljs-built_in">begin</span>(),cnt.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;x:cnt)<br>    &#123;<br>        <span class="hljs-comment">// cout&lt;&lt;x&lt;&lt;&quot; &quot;;</span><br>        <span class="hljs-keyword">if</span>(x&lt;=k)<br>        &#123;<br>            k-=x;<br>            ans++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout&lt;&lt;cnt.<span class="hljs-built_in">size</span>()-ans;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-number">1</span>;<span class="hljs-comment">//cnt数组遍历完后，k还剩</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>好的trick为：</strong> cnt数组的增加方式。对数组进行排序，如果跟后一个相同，那么把cnt的back()增加，否则push一个新的1进去。<br>以此来达到计算每个元素出现的数量。<br><strong>注:</strong> back返回的是引用，所以可以直接对back++</p><h3 id="错误点-1"><a href="#错误点-1" class="headerlink" title="错误点"></a>错误点</h3><p>由于牛客有用到map，同时对stl库有所依赖，所以先入为主地认为需要使用map进行计数，然后发现map按值排序的非常麻烦，所以纠结了很久。但事实上这道题用不到键值对，键是完全无用的，只需要值来对k进行处理即可。</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 优先队列 </tag>
            
            <tag> gcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025年1月11日</title>
      <link href="/2025/01/11/%E6%97%A5%E8%AE%B0/2025-1-11/"/>
      <url>/2025/01/11/%E6%97%A5%E8%AE%B0/2025-1-11/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="口令不对, 您还是打道回府吧." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="0713be2cc410295416e46f122378b8a562de09964403af5d1f2b3546730c14cc">b989be873d6583fb9b5f90f0097cf6cb846894142330871c87a033658894d4637c5d28a37ba62960aa44717ac63c8fc2adb4eb0076239e62b91cc7551ad20ac679bbbbb93ccca9f18c112f4199ba60ad605102a8e822eec88715a474a52e5ba41239492f44941f60bcf737f9215f28fd1f02206acb72b6f471b2f251316106fdf9d5790fad6b73bdc58f4acd431bfbf0e38358ce138ffa76957684320f330925a7db8c356865de7944068ef958cfb7828e87d2b4fd4981fefff46bfdf82b9081eb4b0e288b99bd00bb559c7f1906969949395fbf5a95f18b5115acdc5ea5485a6665d915f30f070de68e7911b2564a8b0699cfc490fe82b4c15d351d88c987c0a0044169ddfda3b6c2c7c99371a6b122152062c5de51f03e7391415e840ff501acae54d7b31bb466ecf9726078ca29caf9143f4c90e6ba669c5f18c9c336f37c3daaaf0b3b5844b4e09d71cd09bfff302be63b7122c730d3060c76911b1e31a2e6a83eb90662549b39f72904460e9af6168e6a64a4e9a1e945c3d70299b88eefb8bd6cf915ef2fa5154d4fe9729d3c80f50dc321d52cd442f16219968e4c204bd1f6b5773f894a6a9556a88e7df32e70856bc21263b42851e822317bdfab064a182da78902a21cd5f7bb3b0787f6a48b30943a76cfc5204d402460d5a421a51a02e6c2db469134e6b1903cdaba09c9e2bf3651785f752a54d71f32631917bd87901fb3a21a9d4b227109c9d6806f2cfd5eb76c8c10680374a32243ae4783a761d07f382516dbbb2b66d72067f283b28f2d77b3f13d26607ed385433ae70171e199cf45d1355cd712078471f3cee15d04140f71b0f80065431644dfc7b1c0c9526497a54631c0577babbb5f897073353d733535ad7f46d157f8837536a801c6d5321c68b66d90f4ee1dd2751a021cc38b7444559cef1e25fb8c65705a5de17254dfcac56d17f3b8d4af5fab2c015c2966b2fd6132487d86b6182d27bde083e70e3182d1a7e35b8d692d9e5c5c08688ed09238149efa98e707a9e15d5845343187696ee5707debbc8d8e891845bb8d58d63a6a419ff15fa0a286bc5e72d134b0c32ea7d877e6554d7ee12fced8af8dbe584479cc9582732e3b02b89a9a026bb3f9f6efb2c63c2129882e5600004e96c458462df3999bedd5327697b488eba02de5e7bf6c18101a7b526025d8c320166e281a520ba97d763a71c9d94c6655998d431986422f13f8f873c00f9d3d39d7db8b642cc2a9446f964e0f26d96b97fc7c4726bc73593b0a41878b6c023d408eb25c0bed89f6861ba7b52ab5b9968a705d08919f005cc2094910088874f30bf20574a2a881bf6a3bf0cb215cc40f4e7f77f8844580f9d1e484eadbcd7436b2608746e53987e4c1cb5aa33ad1d1874bbecf483810a19a2597b50032b67ebf617454d8eed6063ccb2c330206afdb7cb0379d9d994af766c51a589686255a7402e3be9754e6dc9fd45d4438952c64addae07c0931932a148c4c18d54a12d89ebd14f65d06399ed5386636987f446f1f56400394595600afb80bed3ff05901c01fda0d96a08039bcf9163754d7c7572a1720c83243460c9fb0de689a752652b4a2e4ae212ce53b26c2697b16e0e97a10b71afd19e0cfb59ceb38c661fcc6b73f44d809c40d8f2e4b0942fab1404087dd02438fd54e373a6cc94366a0d9a1a5a4927a89a3adbfcd07dc8160019e747d048bdc910c8b6519d67196e29483fe5b159c99fb77c28c127940ba4f90a0764b24794efb5dc6728df043104ada56f988debd89004d1276eb398dcdca0055ed942cf7c49d5cba777df9b740bbe892f3af98bcc47b1d1f580f9fc7b039608a9e08ce212495cf813294909b5740d323b6fb2786b63e66b1a5ff21dcc75fa60961e91a763572f43cadfde7d5217f9013af2528977a5b64117e074898af94998ecf0495e19e1bba0c17b35e74ef0b3276b91e81180506fcf880956fb706dc0bd133587f2649a8a84bc9378d306f136697ca01ec3c02b4bed65db8b1dcd22a149ca9577f15bcf1fa08760a7665732b088d89bfb546e00869fc3bebd990e31d67e66f9383de2fc755dd9a75b67f3e863f42168f4a06371d74f1b8f5920edeedc38a6298cbc2c2725ce6e09532387973837b77ee76e4f2ff4e878b35540c7c416869f0287309d5c9f21da3ff0eb57465da557194e1517aabd3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">嘿！伙计, 看看你的通关文牒</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客寒假笔记1</title>
      <link href="/2025/01/11/%E7%AC%94%E8%AE%B0/%E7%89%9B%E5%AE%A2/%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AC%94%E8%AE%B01/"/>
      <url>/2025/01/11/%E7%AC%94%E8%AE%B0/%E7%89%9B%E5%AE%A2/%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>长时间没有训练加学习，完全生疏，从头开始过一遍入门班</p><h2 id="学习要求"><a href="#学习要求" class="headerlink" title="学习要求"></a>学习要求</h2><h3 id="1-学会写题解"><a href="#1-学会写题解" class="headerlink" title="1.学会写题解"></a>1.学会写题解</h3><p>题解的要求？  </p><ul><li>英文题面，概括题目意思</li><li>题目的主要思路和易错点</li><li>为什么没有写对，回忆一下到底是哪里写错了  </li></ul><p>写点小故事也未尝不可<br>不要求长，要求能看懂</p><h3 id="2-不建议找别人来调自己的代码，锻练不了自己的调试能力"><a href="#2-不建议找别人来调自己的代码，锻练不了自己的调试能力" class="headerlink" title="2.不建议找别人来调自己的代码，锻练不了自己的调试能力"></a>2.不建议找别人来调自己的代码，锻练不了自己的调试能力</h3><p><strong><em>请独立完成编码</em></strong> 不要左边有一个代码，右边对着敲，没有任何用，把窗口关掉，自己独立的写出来，题目是刷不完的，不要拿题量感动自己<br>如果看过别人的代码，请<strong>隔一段时间</strong>再去写，不然细节会想不明白的  </p><h3 id="3-知其然也要知其所以然，请搞懂为什么这么写"><a href="#3-知其然也要知其所以然，请搞懂为什么这么写" class="headerlink" title="3.知其然也要知其所以然，请搞懂为什么这么写"></a>3.知其然也要知其所以然，请搞懂为什么这么写</h3><p>不能只记忆模板，多问为什么<br>自己归纳、发散。<br>别人告诉你的和你自己理解出来的是不一样的</p><h3 id="4-记得复习"><a href="#4-记得复习" class="headerlink" title="4.记得复习"></a>4.记得复习</h3><p>写题解是为了自己复习的。不要追求别人看的怎么怎么样。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>取模运算实际上时间复杂度不如↓<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span>(a&lt;b)a-=b;<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20250110训练题解</title>
      <link href="/2025/01/10/%E9%A2%98%E8%A7%A3/20250110%E8%AE%AD%E7%BB%83%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/01/10/%E9%A2%98%E8%A7%A3/20250110%E8%AE%AD%E7%BB%83%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>今天是正式<strong>打算</strong>开始复健的第一天</p><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p><a href="https://atcoder.jp/contests/abc387/tasks/abc387_a">abc387-A - Happy New Year 2025</a></p><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>给定两个正整数 $A$ 和 $B$。</p><p>输出 $A + B$ 的平方。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>秒了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a,b;<br>cin&gt;&gt;a&gt;&gt;b;<br>cout&lt;&lt;(a+b)*(a+b);<br></code></pre></td></tr></table></figure><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p><a href="https://atcoder.jp/contests/abc387/tasks/abc387_b">abc387-B - 9x9 Sum</a></p><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><blockquote><p>在 $9 \times 9$ 的乘法表中，共有 $81$ 个整数。</p></blockquote><p>给定一个整数 $X$，求在这个乘法表中所有不等于 $X$ 的整数的和。如果同一个数出现在多个单元格中，则要多次计入该数。</p><p>有一个$9 \times 9$ 乘法表<br>给一个数字$X$，问排除这个数字后 剩下数字的和</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>只需要遍历，然后如果等于这个数字，那么用总数减去即可，即可不用得知一共出现几次也能去除</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-type">int</span> flag=<span class="hljs-number">2025</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)<br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">9</span>;j++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i*j==n)flag-=n;<br>    &#125;<br>&#125;<br>cout&lt;&lt;flag;<br></code></pre></td></tr></table></figure><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p><a href="https://codeforces.com/problemset/problem/2051/D">cf-2051D-Counting Pairs</a></p><h3 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h3><p>给定一个由 $n$ 个整数构成的序列 $a$，其中第 $i$ 个元素为 $a_i$。同时给定两个整数 $x$ 和 $y$ （$x \le y$）。</p><p>一对整数 $(i, j)$ 被认为是有趣的，如果满足以下条件：</p><ul><li>$1 \le i &lt; j \le n$；</li><li>如果你同时从序列 $a$ 中删除位置 $i$ 和 $j$ 上的元素，剩余元素的和大于等于 $x$ 且小于等于 $y$。</li></ul><p>你的任务是计算出符合条件的有趣整数对 $(i, j)$ 的数量。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>比较<strong>重要</strong>的一点是，要发现即使对序列进行排序，也不会改变有趣整数对也就是答案的数量。<br>假设有 3 5 2 1 4，排序后变为 1 2 3 4 5<br>假设原来有 3 2 满足条件，排序后变为 2 3。此时只需要在逻辑上改变 $i$ 和 $j$ 的先后顺序即可，其他任何事没有发生变化，减去的依然是这两个数。因此排序后依然成立。</p><p>接下来要完成对一个有序序列的数对的计算，可以使用二分或者双指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++">ll n,x,y,sum;<br><span class="hljs-function">ll <span class="hljs-title">f</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp;a,ll num)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//这个函数的功能是找到，有多少仅小于目标数字的数对</span><br>ll j=<span class="hljs-number">0</span>,ans1=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>&#123;<br><span class="hljs-keyword">while</span>(j&lt;n&amp;&amp;sum-a[i]-a[j]&gt;=num)<span class="hljs-comment">//如果大于num那么不可以，j往后</span><br>&#123;<br>j++;<br>&#125;<br>ans1+=(n-j);<span class="hljs-comment">//如果j更大了，那么减去后只会更小</span><br><span class="hljs-comment">//所以一直到结尾都可以 n-j 实际上是 (n-1)-j+1</span><br><span class="hljs-comment">//然后变为n-j</span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>    <span class="hljs-keyword">if</span>(sum-a[i]-a[i]&lt;num)<span class="hljs-comment">//去除i和j相等的情况</span><br>    ans1--;<br>&#125;<br><span class="hljs-keyword">return</span> ans1/<span class="hljs-number">2</span>;<span class="hljs-comment">//i和j可以交换位置也成立，所以要去除一半</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;x&gt;&gt;y;<br>sum=<span class="hljs-number">0</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>    cin&gt;&gt;a[i];sum+=a[i];<br>&#125;<br><span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br>cout&lt;&lt;<span class="hljs-built_in">f</span>(a,y<span class="hljs-number">+1</span>)-<span class="hljs-built_in">f</span>(a,x);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025年1月5日</title>
      <link href="/2025/01/05/%E6%97%A5%E8%AE%B0/2025-1-5/"/>
      <url>/2025/01/05/%E6%97%A5%E8%AE%B0/2025-1-5/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="口令不对, 您还是打道回府吧." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7fc874980e737cd8dcbf0596d013f20955b925f75e8b0badf39b18b605277eae">b989be873d6583fb9b5f90f0097cf6cb70635685902ace6ed16f29875f36c89f99352a73968a01c2eb87fd862f1f3d1cf545000cc961ee3e9e660469aed37d731572053a765336df896bf5bf2e89169a9b9a8b997b0e6cc4ed274de599652478e04aeca5e06554514555aaa75404b939a1ce395c1a43423acd6cfb24fe37fc4e0fa0ba923668cb0ed3d8bd78846b0f10ee6ac2d34321635f70b7195451ee360619ec6d25c237833af513c2c08cc30bbcd39bc48b61ce64dea56ef872567f9bc6e7e1458b1847282aa7658c548ae0668e3ec70b658b540b8884c2ed1f6807d4879555affda271ebc04a254fb3546f9859239f3041a767d8a0a2e45239e7117fe0885a075b7c2a68bbd5f9210faa208fef6b8299c4d7d39c5186c8a107d666151c7d7edc2ac665a7b5c1b6cb54f58f02298910dbba5ea3a7881bcd3a462196a0274aa3095b0526505116ffbb58fa861285eaca5cfdf7ebf7fd41d5a4a9f02882e45aa75cfb9e2a3f6b977d6ae73fa33523fdfff0b4115b77f6ad0f5e720586b5da960a2520f44c6b13e549a76e57fad3c91a8daba528bc89a46a60cf155bec47522061e7cb153e0d5024f19339e20455a3a65b390aa8ffd30a4b4e23cc017bb20cf37fca1aa53cf3ee99027f25c109caa31d6574da5039ba1fdaf16b18b0f6567daa8c6f97d9cfae80dfc541fbf7ac7a9df483fa2b8e13ce62321d7a3306b36dbe984c6d84cbe11c9dcb2df78c89e869d249df42565d363988a7eb1c0e359b7606eb04341c8ac254a557e376c9c41b6b467742efee0f2a3a2afb2943025236d3b25373bfed5ea0d66a8a7c892ca41d8b1c6d5278463bec0a2b1e53e421b00dea6ace36ce887a67e7ec421659bd6703e6f68138365a27ef8f12ef15d1beaef102960a4abc840b7d0c5621788eb02adc4912411579a26845a8c3cdb1833fc11cc0dc2297d3b2ce245675eef86eb453718581fab207fe27457bce12708e2be4441667b4dea45a4a01103e51658511c73ab872832888f25c70dfb408ded3c0348f4e0e95bb16ae24ab5f610e345b06d3273f58dd4c7ba32f6f2c0f82e16285688d34016497a050f8565ec6d44728a6f368de2bb9838388758f111687db62df68eaf4d3061b4975b92837303c8bfea6e9a872ad94a15f872ddb9cbc936f3b4ba87987881e77d69c2475b1d29fb56d3b5afb8fe4dcdd2e9f1560d1c2f9f06037700d028ca1049547cc79538fde9b5e4a79caa9400210b654f8fdb3a960655c7cbaa9c6508a9d2c3cf1d336931cfa0e392f369efdcca757eef800fcb00d83565def87adbb5903bd8e342dc6ba5a2f566699d7f1a4ccc1a2be6250f03995df51392683c52634f217f70d34c79cc6f1b977d630754babd073b0f47b13ec38c4e4999ad832a43b6a1ba11adb83fe347e818885e9cb3441b88d9abee1993a84429ad016d710d58ec9114b06df15835dc3370766b2df67c5114f020fd952b2cdb4a98304f4e79c4f5fdb47e1bc1c275e22ee68ec4614fba0a119ba9a2f4a976c62bb8077c71730bc4b31528995be7a3c4af2353ad2ab52b48e31dbbaa341df5e286479dc6588df61054986184026eb72c765cccc6f6626570e0c24943b4df909ba924cd37fcb231dfed50abd3524b1a51e23e93127eff06eed50235e35da399f9b0b1b5e2f8e4e715f6650c1c8554487ddba5ad7c5980b398da9b11089554560bcc9951b210b2ae99630617edbb7aa75df3da133eab912f9e48ef9c095fd2ede263ad623e9359dc4bd0b587852712d1f554081da48be99717818f907e998736df7ba2d369a8a1bfa6de5168db06aa1f71de2f13ec82773f5f34eb365674a76cafe50425d1de2f40407a89dbd462024f1e834d2806b87dac152e30ca70f97b39c2f0b69a74c8a654d6d11f881e8297db0dfc43a6916f90b465d0f3e097e26d38293089c19bff5309571b134166180c9ed136a8b1cd945aeb3d0f7d5a1a3f19adc320d56586dade77b2de89f97e84f75467244707b89bf3d72bc908e4a08a9971636b5ccbf1b04d53d34945fc86bd15026676b536cae06367a74475545e2c752e3dff4d7c7e705675082b1ed4fee2e19e9caa9fe93c8581c31ea34068711798dc34d132f22dde097e9dc94199ca09770619451718a8fa4d1d2c653810b96a178676b34908faa5d7018294b6728703499fde77201349a1c10deb9a18745263cb48418913ab197d3abdd3c69ce403896e2eb1c5ed789750b74b3c94d5f580cdb70710f78a850e0d249b111e8f6d5b89e3b4ac32e9bf3ddb27080e3495da743cc228c904f037b98f69e38e06600b3e0de8d679f78b741d7aa585cab216066732ab61bf7e5f47522bd9c61787f2c1c717472df0057a34230c134eebf00e7578fb96c54593be64de21d84f35aaaceffc9a38ac19533af20db99505e404ad51414c2e9389b07020c81f620113edf153e3b63b7a8c728a7416589a9059ca148c16a1782a118a42006e355cfc8bd674b734b0019bd38d660387bc12e797ce231b71ac34d74ea784dbcf948b5e521f62c04de8f5f4be0b10dd85e65fcceb17f0968fda1cbf093f6a7be82858e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">嘿！伙计, 看看你的通关文牒</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-23日记</title>
      <link href="/2024/12/24/%E6%97%A5%E8%AE%B0/2024-12-23/"/>
      <url>/2024/12/24/%E6%97%A5%E8%AE%B0/2024-12-23/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="口令不对, 您还是打道回府吧." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b754a51d77eb2bc3d1429d79122b3000bdccd48a805006dac12d617ad19ad454">b989be873d6583fb9b5f90f0097cf6cb846894142330871c87a033658894d4634f93a4b732d1ad957382961983e07601a37182d786843cac199ab115f0cfedb1d993bceb728265ee7d8483493262d97fe96f2db89d57f8d7dd3e03f9c7c4645845a52e71c1c5bc9db2437f485a1028ad4bad0b6e83edcc34b9981c13cb30f75efbf6f5857502b4b5f8f5c682ee0d1a35a7fd871eced8e9f406e5292abe53b7741994175b0dd61e53e40324688c444012417781b216ffa6a9368239e225e4e1dd40b363d59bd9fc2af9905e81a3866846aa44199a199b04975f1a2d2da0029591ee745606cbbb8681c47c9452f143adf09bf7e7e5245a9b0df00b6057625afee5bab6d310d266a091aaa861da03b359965dd351b4fae37018519a878f40180832bccc6fcea61f26ebc513eeeffa70a2430c6adc9f916e87215859f9055794349e9c73503ad59de69fafecff1748709524eb3c9ecff6fb26730194b11222aa55f4b95b7d1ce6672d9e37b28b6d4030bfe78884e4279e65f23cce377aaf4d5bb1e33f941abf6141f64d2a7bda26b0994628a96ba4876e644b8cc0756ec500c12088280c26771341f78f9f544c520a432906e41024a6e535dd41f23f17155be5c77be251aad9e544867fc04a0d782865f37312f64abde359b6da44feb2d583b1c0b17c2320924b2133e80cf473b7ebecbe9d86f56e96f13d1193cf483696d4dd7938f6fb35740d5ea3f7120948b72658676a0c71b55fdf3d62aaee1f987733cc95332bc54fe54999e57c1fa9b31e45126c7e2c6c2536ade9ba24802ae2f60196acd4d0229297628e62985dadb6a01759099576d388c360fd068f04a6ad84b9eeaadb06f581a2822d4e7cc4b64a164a71f1442625886e21a637edcf9054d6c13b5ed22421f141967aed2268d7511f8ff8af7d3808b2ee02759862e2f439d0616fe589553d280ff31d5aa6cc535a9d541a8ab259b852891309ff01a5fc375df5971783bea01c105532477863a6e7a836518bde704594774445b0cb8a287253233ec79d94dd09efb37239026d98633ecfa1ce3b9e2fd95f6b22de40df730b55223184e787cdc2d71b3202d1badce41ea801598bc7d944cd848617b856f81ea89a42689ecbf6daebc86e9e672a7644832d474de9f1a5ee45baa6dab0bc7086ed590bce8af396ff78051766ca1f2e7dda0acfd0d652b9c00538297b787c4e3105217532fabc5ce4b11b12a790fa3ac09bb9f3c061eb77bc3c8934fd5a0af5468945c9ccb8345683600ef795137f2f0b12bddc5096998d1ba8621c16cbe7ba3fee06451f644a8c1f7555013f6677c2d00a1bfb2706887232fdf02a9291f145ddeac4f4bc7cfc91ad817aed68e1abb24dca800ae50f6caf4c7046dd3422c320204c66b6a395b831cbf932369be7a6162ff6df43b489948410ad62480096c7892da7057e7aa371e0c4d62d659ebad634708d97ac96aa324b2327643b19831112d35d133ac0be0c39413bd6561a706d3a0c685dc8aa07ac99824d0a5e5077c98e65905a7ca267df3f906fdf1a919acda75b396c73e34b346f21e1b25dbfee746c8a860bfb78c356a856f89b55fa2681c7bcfdaab715f9971670f6163d5dc7842c6b25de3b9b3b6f832ac77b363945bc3769ea65249f66114a0b705affb62c3e0f46a5c93c40d913b82424995d3aaa07a69d58fc613f18706fcf510de701114c5ad36d5ec8c3c4790ab6412385628527af2a8e3534c2ac7d01b05c581456db75c2a4288988a8f8a053c21006bbc5229d83a476807e6890e3d77606c0f2121365830badfd6919227915d43101a00b628903ed6ebe33acb4e9c5f9187d676b91a404d4e04e07f5414eadd092e650a77484861fed56c9d5faba425cb5b6b66f7ba876c2badaaabc2547c6e58cc4b3fa87e2b7cdb05170e2232b3d7a6d68d4180a3425b502df532ca99e0e673201bb9c08b82766038a770428f03c74657ce11f946065467284573433</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">嘿！伙计, 看看你的通关文牒</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-21日记</title>
      <link href="/2024/12/22/%E6%97%A5%E8%AE%B0/2024-12-21/"/>
      <url>/2024/12/22/%E6%97%A5%E8%AE%B0/2024-12-21/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="口令不对, 您还是打道回府吧." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="9dc89f1514e565fe4d6d62f105562d18c6f1e72496f34bbdd0dedc7057ee76a3">b989be873d6583fb9b5f90f0097cf6cb846894142330871c87a033658894d463075f2be592b6fbdbd79e85bf8cb3732a05c499124138d24f0a65333106ab20cdc1688ba95efd4ddae71386e77cb3a034b4c043d3bc1beb6bf3c8ba68c55be0f5afd02e898f8c5c8a03ddf8aac331d9b73db38a999de49c07e4c5fb3e67929be5831d4b456424a6f2cdce2709b6373d62eaf8e74519662055210e9e022f4a7675605e5b02161f70e152097e9d03cd7ee847c6582f57e54a158650f377b32b68222933bfb8191fbdab38f866d42dec58e00e9c6bfb28009a89eb100112d87ff2f1acf71a83fd4bfaa5469c41a82f409ddff9169d12348b56add2713e9047b20f11667e6ad6508f37afb3f550c2cd1387e56f870774ca3f652470f0457d43d4913b94311ca2a65ff9e72ffc6378f1b80a9190c3ae73e8ac7cedf60b6ee4fa7fbfb223429a83801185c6a5439390a0429b288e8591b626e7f9ffec8e024216888d2cd6c1a459046669937c0b3cf2d9ccc13bb2997e1af146d60b8763ceba0a56ed0f9699c4936fdd50857b5662a53e4c867a048756388a7cfd503f40e3b5bdc2c53d39358d214c88b8c19edc4b4a7483b6ea4b5803638f7ce32d41c52f3c86a0bf14a0d782ba5c30bb6f0ed3b6d62a5962772f1dc2172cf8387618b9260d834b7e594bb249fdc2539c13e07f1283588da6744ac820b8992b905218d00dec964e2ac0ecf12bfbe06f4993aacaffdd30b14fd4330077d85cf45460b855020660040f9f7a026b36de23a253e08dba5d3967e5934cfbaf509e50aee3b235fa7db58fd5b77adf53b12425d98f8d474a0d0b7fd4961426b931266f6f8b7d02c61f3522a1b18f8b332eceb000f26dc30521c45a08f4d4b452c6cf237249935338090e129311deb1cb860c9124dfcbb08a0ca0b2f24fd0570f0a4efd38849fd3458cf841893a564292e4c7388f51e898e5bdecb2215ccf5cd8dbecbf05c93600a1899ef8bd7e164ab9b06d1f3c45c7abc73b7ec284011e1f732114df0d6728568129604598f840ac2a32de30af241f5097cf4ab4c7015e2b5c3333eae39fce6c6ef409686a2dd58b932ee18ce76044de246307e2e4f01735e1340d0525412d974a8f7e99352bed4725baa6cf98b4c0ce9cb66fd02cd22a67a9faf62f3499b436cc890da427372515d48e91ebe2eed78b6adcbd74487cf73759e3dfac352e0dfb1da3e72d495875572b98bc5ef3ded2f2b27cc58748656252fa2d82b9431af5efdfe392d732e47a95fe98881feae20836a0c610718eca1b70bd64f9b8d281df72e1b15c6d936db8d050dba806ade67de1d1e4220221e86d3499244dc98ba9a1a6035ceefd8d18742d6ffeb5c468a4f20a5bbe2b86ca82421fd722968b31842b9e563cfffa17f81ea9cdcb933f2b82bfc62ad9a742bab95822cb6ade0539062042e65e78556a3c0c9ad0abe8523fbff372e346fe4cbc81df5d36fd81dd9eb6295a5d93b31cf3acf6a3ec37ed45c71b32628103617d2187dc4d35022054e40f25be12659bb4bea815e0de5a08f923e9f8a8edc70a3b292aaf61edf163591b522d9543173848c57c47a3cece0d41a0b0b415cf6458c6443f46c7ecda13822ebc432d8d79060ed9cc4263788a77a31df532bd3da16edceee4dba7ef2f594724d5b24051bcbdaa5a7c2d5ec63f2485f1c708846f40f752145226f07b8be34a5a2f3d31da0697e014b33aa92be5c5ee616eac182fce29145cfbe5155324798815aec90ec9da5fbb15c9f0a1ab84a9e08ee509701a9b67648b5a67482951defc154da6ff57d11868c6ad83afb35f5cc5e3587670f509155a2741c9ffefc5fd679266ef5ae3df5351f2a5e6372549eda52cda81ae61cd5963f253ce5ce49e5373e6f6e75aa30ec14416576744ef9cb12bf82d43531aa8f9dbae609131ca4365483e0d98108abdd57b219977bf70995ad01a8546a328e6bc9136f7bc8bb13aeec377b970750b20cd57ab3efb0756f8b79a4a82dcbc7df9c2a6f0d64a3206b9def6d83d655f23332bee780b4a60c60b5c61df17a5257b42158fcacfbed9748cd746c6b71c1d90386cf8824ab6ee038a52bb5da268045b812a71c9223c07d9cedee1eb8babcbbb1d27aca6a18ea5daa5dafcb540a0cb1078acd7fa87e73b1f26a833e19be7c636133f295ec12dc9c77024d9c77afc835c35e2944189c59af63ed46b28eb728299d7453082583cac436033c1ff35000d69a99916cf72bea268fd02a016587250702fdf777e0038fcad9afea8d76742634ec29a1698c0643cdf58b6aa90a94ce61c0970ac360c517621151e1067547574e1e0503017df895330b64a097ea5459f6e4b6d91193dba16c6eb1920e59b9f5effd53e76a5063776a9cf5117c8cd487053cc6d29ab8686b1b53b73880b69d1320d2746fac7421e6e001b9e4fb53d47c4b8bd317460b6676ba05c86a5e94d7ea8d11a69b1e5c36cf404e5553ac59e98697957fede4e94b23422c858b4cd177db466c902dcc8a1bd5d2ca5b6c6c7269451381964f1c4caca2b53f283536e2b8542e45ac32fb69a871bdf4b9c513bac83a5ba888eeeef6ed5773d823a419ce10862ca62c5e0ae7ed875f7380ae0cfb1ddbeaaef7aedec6bf5b649c601338e38e4d9adec49baa486d5f1fdd747d63175781e64f7f6f8f755f73bf474501ef96d03327ec441083990049593f7cc0f2db2c36dbb92a7c2e1159da6fbe2a6195eb79dde45f51be9c8fdf4ba0da4c552dbb0c0b703f240ffa67f231179fe58c5d0a9f2f7eb9d2b87da08</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">嘿！伙计, 看看你的通关文牒</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-20日记</title>
      <link href="/2024/12/20/%E6%97%A5%E8%AE%B0/2024-12-20/"/>
      <url>/2024/12/20/%E6%97%A5%E8%AE%B0/2024-12-20/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="口令不对, 您还是打道回府吧." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a1f327c90ecc2f41835202c0071825e09c1a29ddf9950106fd3d28b6427673c3">b989be873d6583fb9b5f90f0097cf6cb827c9344e9fd41fd44b9c924c75930dc2db1bb86690eb1628b89821ba05f1f6ea358b4cdb9395f182df92bc0dbb60d17f8305f12b8ef9986ded4b66a2a7ca2b82d89c0832da7fd6b667f65f5de8b2ada0075be31ef22b5aa671657f2153ef4a4a4b0127239960b0c787d484ad3da145bb4d74c7fd47664f03fc3a7c4215634e91e59445def5348622c4da67f9bbb3e35fc6254b3c8815e0d44f25f0d5846f3cf1c304b2bbcbd1416033c0573265a95de129df12c20ab27cddece66ca135897a552f863a140fd847f0d8dc8e6f8bba77b27c02ba38386ebb2ac009b029fc6098d183da40b9710967f794fdf8673bb8bfdea904223258d7bb8bba1bf88934b8d6815f0225b45f8fac446bc1804666b29939771eb191cb68039f759f494bf7da18379ee02cf2647750ab0f90c9c76aa7e99ad53dd14deeef2a615c319dc2d46ef4f81dd7ab0b323a0e24818c0ec18716eb2db9458fb821e2104f293fa12c07be976cb9ebf252d03f38082961f08b7201d251abb6cd57654b2db17abd134bcf6a6a098c8b85e449fb87bab70ff42596f4d88163919bd33e24810ea28bd0980bfa7a371643e0e9b002d8eb28f5cdb57354aa864afef20a7a67014899e96432a913ed84a390f9fe5934e448a6067f10f01794c1a14b88cbe2c3fba9020cd4f8c3e91f350ff90117432efd4517044584407d861a89af81d676bfe654254a49901488121d777c3d4db50f8e7f568b2d849d383c70533fc530a9050553dcbe855a47445aede12380683434d85c4e2cbf4b4a8c3e6c196e4d253c3a78ba6e6ee2cf347d7a8a6e4aff433dcba5b93083de3ebe16313ecbd6a1ce842277c177b9463c33c868a70ca7f3390032efce9736796112dc619438f2f799a1763b88e68c15a08962b9aaa61997987ae0d466d69f424b1f0d091c809fcc9da93ed0f7f9654c8aa05828e4e4a130cad534fcadd584116f399775a4bd45d72946eaf1fe014cc3ee5521ab50c764c45aef0a21635465dc4fabbb9430f2c65078471ec128cea07c9b702f519a4c2607d2f7779ff560cf6dde89c67e4cb2c1b617616204cdfce172fe0786e817c0a7342d0ce1f01c71b1dddb5a4807683af5d358b73dcfadfc326d17a8474ae3119508364dd2f80c35e7977b42ddd5f2f3883ca1305b1ea83340c3726b2961747e8d67949df69e6791d773cfaab27089c2b81820532eb6c05b0dc2722cd979958700b8be8de36c0a92a1e411715734174b2f543db0bfd76b9b92ecf45253aafa2913bfa2f1dae0c63fbb54de6aed620b8ee0f0d9a80d5ffe4f27e289010c7dc2e3614b278e96885fb625f222eefd93fc7d4ede726fa06d56928ceb190d6d74c7243ef8479822674be5a2c3b15fa96268b387d4501c0cb672bbde0691f07310c9fe099ee484eb28fbe70ec5cb9c8d3408b3eb5f8c37ea53e4027456c673ccfc73020eaf15b4fa0f9c238b70468a177060e7978a55dca443f47ce58aa9742ffe9e41af140bf831f564fddb768bf284ffae7bd14edaa5e6e3c6f653727eba31afb49f35a276bbf9c0f243cf39b5b4d262cc2df810984486831b1f72426743c0fa9d74ac20e5fa9e88e1d9ac8ed08389d5f5d9800066f3d994070c79cf232ee94225fd853ad5575276d38da8ebaf0f7aa25fc069b2a704dc080575b639cec1061d89cd6bf1a0fee8455f6e3bb9fd7655e02b674b9a2343c86cfc234b06c9e713366e0f1bfa2634976f82c13f5525e07bfb131f6fa7703f31d8255da3ca6b6d3c9e57f2d973c1188183a08cfb92fd6983cb6422d5b759a0fae6c1b0729a906ce36823eb566913ffe43cdf5da615ab7d786b0683934cdc29a4d3cab24f3281bbadd499c164c072306cb54879f956c212dcf4e6b7666656e0207fa46b2d2dbc8221736b7839d3e09f2b2675b8e2ee828d097ab</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">嘿！伙计, 看看你的通关文牒</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-19日记</title>
      <link href="/2024/12/19/%E6%97%A5%E8%AE%B0/2024-12-19/"/>
      <url>/2024/12/19/%E6%97%A5%E8%AE%B0/2024-12-19/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="口令不对, 您还是打道回府吧." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="9e6a5617b19470855c519fb6ff5c50f728170d8acd2f4bbeb014cb85969fa69c">b989be873d6583fb9b5f90f0097cf6cb53a4a015e91dbcec5abb6c57280673b4dce07d977f94e828219923b157ab6a0038c41a3b96ee1b66c3126e754736bd526f3c36873ff03bbc322f6bf14cc348701a5fc52fd52804d7890ceaed1e319ff8329c7ad174368ee402586930139035d07c46e627b143677a5d9c538fd59654522b2a8044ae8ab6b09dfe89c157e9d30ec5ce8a1df41cb50594019c5edb11c323a1ad314b62cfee2e6b70a11d37d29acd92c522400c2fc15062cf70d861f8049d6f7640bf558203c7aa787856692aea56debc9b3248b760ec2531bc87f6e4cf420c80cb9bc1211eac0b5c90835e9ab1f2b7ca271367c386cdd0c9e09f89787aa5ff13c21aeb4d8e97e2a67e51dec2da07b1866681d15affb10f1f69ea0ebac8e41e3e56e2e15eea0c98978b85a02d7d007d4d25ee7847ae2f264f250bf6fac1a7d951cfea3b9375e797881ff1f4d102ddb7dc9d3c814b1a0d93a498b6a2b0cdb73164782f75f397fef45cabbcb61219719f1a333d4c2b56d54ee8e08ef39c321cdf47a05dc5ae62f24ee4a490b043fd94e6ba86430525abde3444bb6501e307cb87bf508efde74fa878d3e5608cc5aacbc276f5adad8d90084f8d83c9d3a7dfccb2170bd7938deacf0fdd7e005fcd1d690ea515b42aa62e9e20e6f4b1fbc4163d83265e2af8bbca6959423f8c5ad856a3e53ccd006bc5d75249b8bfd2fed9ea7a8293c2ba298ff726db5eae2204857de7d27ef3817c7dd151be2a5e837c59402cd920915b8e7e51071c0b40c446c3f7b77b3ef7e7a6680c533dea8d458a7444c5ecc7fce9fa127c300fbdbfc3fc02eae292e26e5d5bcf849ee47a29b8ebc7a36b2ec18c9e3be944962e9e350dab2293d0ad509854a2e36078cffd7128153c16d8f499b5a2f0254ec1e3f745321e16cbff15f7eec8b8ad1af24471cd259e507ba4f7b77d5cdd97a69842d3259bffa20c44532d590bb40a988a77d218b9aefddc3c261ff837e6f3606a28f96c896e23a83aa5ea7c548ce2a01aac788c4d41a316b939007e61892517087815ef6b4b5dcbe26c4e41474a19a851253d6db71f6fc8fb4adf5255b970d29587a01b88160d58bc49e88853974448e2cdbb5d48967a29ec9f43243437193cf4cbb701274a8aad5490fd68956414ce2443bdfaa41f9de807abab2587eb2d0f82d468e71ce1b3803292b3e6dd6f1583f21987ec7a9faa0dcff0283cb42f04f4ebe28cd5a91dd47755004cd1429c3c0a0c63f6352cc6d723b9213126cdfff04f50af05f0d915470e853aa51a9477b4747f448b18f53ea036a3761d39b01e7749afee6a87a1d18371eca4e3c9137fa8ac9699909b9849868204707c390a15424610c875924a126ccfb35205d5808b9771c8143ba68989b9ac28e0eff11551a3c69c4fb61eb73a4363e60c35c788ad4fa4f9228c64513dc73a21cb82156ae479227a6070cbee2c053d6ffcb3a5fee6b9a06b9812e17392e955f1a0d4e69b12783897cfcbd65e4ae84d59cf311dfa64dfd9b4f9a9ec6f68fce4481fa22d2de816ed79efbff732827708a4c400cfed1f998c0b7abe33e1924c16cf2c20149845311109c8f1618479b0de458b418527e0326139e8c219675c5d14c0203ed3569812175155c33e0493a5b60b46c2ea70386168cfda862f6eb0a97eadb4fa007fea1182551623669bd0f9e6ffc340fed9f6b289c5238c74bdaae27f8e4dc6e5b2f200b64c7c52689dd8ecfa7ed1133c7b3f0faac8f3b3413b3b4e31ca97f88e8df2c6b9e72affd55e30e3773b74b2126cbbb41839d7ee41c28932e82f535a11b03043b20533d7bc781de038968d23c30f7951ddd4dca51af95f9ea0f92793495cbcd49eabe274a159bdebbe8ce545c1e6569780227caf1210b3b4437a705cf940c8e9252d1ad5a79ef1c11bbcca9f3452a49618d6da561c4b7fac57fe7c5b2ffced471d88d17a2bf560f9cba083d0f624211ad9cf97a8e3af1ed6ad1dff1024fd90775ce4f962687abbd84650cbb1f9b2482e655aeaf21242f3c5f9cf0993891fc27bd2e1c43742507bc7cd3807f354b22d5e7b1e154e142600046415</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">嘿！伙计, 看看你的通关文牒</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从学术研究到量化交易</title>
      <link href="/2024/10/06/%E7%AC%94%E8%AE%B0/%E9%87%8F%E5%8C%96/%E4%BB%8E%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E5%88%B0%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/10/06/%E7%AC%94%E8%AE%B0/%E9%87%8F%E5%8C%96/%E4%BB%8E%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E5%88%B0%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>一般的研究流程<br>找到一个深入了解也感兴趣的方向<br>阅读大量文献<br>从文献发现可以改进的地方<br>做实验、做改进、整理成论文<br>论文发表</p><p>了解一个领域：<br>1.从综述或者比较新的经典文章开始了解<br>2.再从综述或经典文章的引用文献开始了解<br>3.阅读顺序：摘要大于介绍 关注作者的理解、缺陷、改进点<br>4.不要用自动翻译</p><p>杂谈：关注对应领域牛人的推特/知乎<br>关注近期会议接受情况，了解较好文章的分布，尝试找出共同方向<br>不要看非专业的资讯源。对于以学术研究为方向，不要过度关注工业应用</p><p>做细致的研究<br>一般提出某个优化后：<br>比较在不同数据集、不同范围、不同参数下，模型是否有统一的优势<br>思考优势是如何产生的？是否有理论支持？是否有潜在的劣势？<br>研究启示和如何进一步改进<br>追求客观、严谨和准确，文字图表简明清晰</p><p>做最好的研究<br>趋势：质量大于数量，文章宁缺毋滥，不要发水刊 ccf-c及以下<br>ccf分类是主要标准<br>永远保持学术品位和学术道德<br>好文章一般在目录的A类的非国内期刊/会议。目录存在缺失和分类，例如iclr<br>没有想法可以从kaggle做起</p><p>兴趣经常是假的，深入了解后可能会不喜欢了<br>对齐自己的认知和前沿的认知，了解该方向不完善的地方<br>广交在领域内有较好产出的朋友，结合不同方向的人的看法</p><p>不要陷入热点<br>热点切换的很快<br>热点的机会的窗口期很短，从发现到发表只有3-6个月<br>个人的研究会失去连续性，容易迷失方向</p><p>人多的方向也别选，特别是大模型、视觉、自然语言<br>大方向都有工程化的趋势</p><p>如果要以科研为职业<br>特点：赢家通吃，成就感强<br>申请phd主要评估：文章质量、关系（从属实验室）、文章数量<br>国内学术界科研：产出、山头、帽子<br>国外：性别、产出、关系</p><p>一作、高质量、推荐信</p><p>逐渐互联网化<br>好处：有钱有闲，不容易被开</p><p>坏处：坑很多，很多职位都叫quant，但是大部分是牛马<br>门槛很高：行业不需要太多人</p><p>本质你要拿出证据说明你能给研究组干活</p><p>本科生想做学术要进组<br>也可以从好的学术社区做起，微软科技，cvpr<br>访问学生的要求平均是发一篇A</p><p>访问学生：<br>不需要看计划，直接发邮件，说明有多少能力，能打多少杂，海投</p><p>openreview.net</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 量化 </tag>
            
            <tag> 学术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于人类精神世界的思考</title>
      <link href="/2024/06/23/%E6%80%9D%E8%80%83/%E5%85%B3%E4%BA%8E%E4%BA%BA%E7%B1%BB%E7%B2%BE%E7%A5%9E%E4%B8%96%E7%95%8C%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2024/06/23/%E6%80%9D%E8%80%83/%E5%85%B3%E4%BA%8E%E4%BA%BA%E7%B1%BB%E7%B2%BE%E7%A5%9E%E4%B8%96%E7%95%8C%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p> 在实践费曼学习法的过程中，我逐步认识到，每个人的思考方式大抵是非常不同的，同时每个人也很难理解他人的思考方式（有待商榷）。</p><pre><code>过程如下：某天在脑子中，我像往常一样用“图形化思考”的方式思考问题，就是在脑中想象整个过程的结构、细节，仿佛一种流程图，并尝试用语言将这一幅图描绘出来，让聆听者的脑中也出现这样一个图景。但我突然意识到，聆听者或许也能“看到”那幅图，但可能不再是原样了，或许是“外貌”不同、又或者内容也稍有差异，这取决于聆听者过往是怎样处理这类图景的。例如，我脑中的是高一学习编程时留下的传统流程图，再加上思维导图。而在他人脑中就算是二分图，我觉得也不是什么怪事，这是个性化的，如果没有具象化的例子，那么就各有各的特色。因此，如果让人的思想任由自己发散，那么大概率，从地基到穹顶，从玻璃幕墙到砖瓦林立，千奇百怪。这也很好解释为什么人与人很难相互理解，你的思想是栋楼，我的思想是湖泊，碰撞在一起，要么被淹没，要么水溢出。当然上面的例子有些绝对，在社会这个大框架下，一般是不会出现完全相悖的价值观、思考方式的。</code></pre><p>嗯，随便写写，就到这了，感谢你能看到这里。</p>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024-1-1</title>
      <link href="/2024/01/01/%E6%97%A5%E8%AE%B0/2024-1-1/"/>
      <url>/2024/01/01/%E6%97%A5%E8%AE%B0/2024-1-1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="口令不对, 您还是打道回府吧." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="79d9c8d569feb3f85a22470bf1fda871484b7fa1fcb793fe78be53608db26070">b989be873d6583fb9b5f90f0097cf6cbed781e48b248b2fbc89dd6db54dcd2815bcad2938d851f1f98255f107986189be45f580624afad5c10ce4ee6e1c04153719b91f0db366022b4d55d6a703ac9af78de8dbeef4a48e9177510dbf6335d5bb65dc98a844e6d2dd0a845689193980b93677843afa7597a56fcbbbc2d76995f016286225e4c27fd31801a9b3c6213b6f85ce790b09adc7e6c4612eb69fef8f718309cd32c70e74448c373d96e65fc3657fd55574eb5f047c5a99f1f66ffaeb5261001076838a78f9c69bd6a51280e529fa3fb7faf591b022df495987fa8c2dd27166d0cc285d4431237d403496c55ee830abf36d9d997eb2153082f72ac5696fc128994a2c773bad3958a5af611d97b8109bb84c25843e53f84b27f2ad2e96e80699a87ecfd64b0934a00021e60728784c4d0de850dff68fe9e878cc24845f76ddf95409e796f1937da085d02381bcd2ae06f7d6b9e1885810182fb751d8a9e4ba0170250f3bb945e2fd0668c5638149c125b0cbf39cb78a5467bee6f93cec1ebb2647c46b4acc13d3cc18f048f6b610c932e1bb9806906c4b2d64b79fe308e34f81951868981639b09d5b17d11502937ba7c2ae72bb94edc7af15d4aa1cf43e86e5a9a4329d880b2793f76a5dccd97ea894adead0df65356e5d109c4f4deb017596e63b1eb903aba27de6c082253aacfd87cbd1dd3b215817018825b3d7df919668d13e48d5c9d7abd594295ab7ab1ab02edaeaeb5ca9e0fec514bde9b9064c0b6f1214192f32eba9742991226dd2276ff36d1b83e6d836affdea04ab50e12ff09bbe8d9d9197baa45180fc5e559da53c8d1bdd68abd42d88f79d1e02138717d8361d54ab2096d880fc10ea7a44320b1679e69aa50c881b7f29d138025a17998d66fc5b2b06d5fa93a00bc0479fa61d5a2ee3b38d65dc0cc72a50ea000bb04</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">嘿！伙计, 看看你的通关文牒</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年8月17日</title>
      <link href="/2023/08/17/%E6%97%A5%E8%AE%B0/2023-8-17/"/>
      <url>/2023/08/17/%E6%97%A5%E8%AE%B0/2023-8-17/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="口令不对, 您还是打道回府吧." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="71dff7e61e699466b16a104fce397e74e20081f49b202168327cddcfc2159233">b989be873d6583fb9b5f90f0097cf6cbf7904b297114b5f7eaa943a7f464b5dc780a0480d230f2e616148fb5c34c9f988133ab91efd290cf0d2f5bacdf24d30d0ed8aee7f46031a75769b414c746da7f9950e5597b3e5458fa1bf13073b6b46f1deb91b754d22683d8ed5a34436722b818ec25a3a7cbf5262d03c6df3b28bdf62f376fc1e5f6737ad0eb1f1a5755e6ff8fe180cbf022c2a5c818b306710de57e9202e1dd6a78549a9c20e8f8ab40f0d7815cfad51823f4f200121b293a3ddb878c0bd4ac17351d3631ac50a3f824af2e279281a8359efea298dd99f557b531a2b4e7578653c88bc56fe2e8af3ac140143f9565d5c00e5b3c426454df5e6c8c6389b36bdd2be26cea09bc11cc60635780341bbeaf29e7c18f16a74226a00f5f573af47c3d6721ca9980c4161c6b24db1ce7e8ec61f277b5099c62f01b63e207364c317fe86a19356666d8b5245de8a23409333a2fb719f4071e97240894bbd75e109584e043805504cf78649881994afb70fbb2b4b176bfad96e390ef1196b4d46886e86bbc76514847aa44b186aacedeacd07c2e3db0d2c78062a085451d9cefa76b334a84b085ad5e4cc37d801ba8582cd955002edc5f27991e41f4b3714c653366857689becf1d9a96312f99d26648c3fbd9216f50bec68519a00d7295e5014dbe7c194a1153a8cc61cbdcb5b5f17966e03a5cc315671c375504f4cf422f963ac4cfd7f8848a3b0bc3898e1ad9a626164d79e4d0891efa89cc4cca86a76cb80d19a9868e2f370f559260b62aba3c35ed3c1621d12df292741b98e05bea04c3b58eda95f5581a95a8338b93803212e778ef18611acda78785011eab0c6309f17808449c50286980e882d125afe34cdf0644c2ba091023dbde0a7ec94199f4bb27cc383d6b82ee61503f4a4b1bf88a907d45015e7e13cc5ee6a30df97071f670868baa24185aba6c59675196d18bb7febf2a5a8ac1efb5a847060145300067b2a5170d015ab5cf458c73f9613e665b393a392a5fdccebb4d0a4a9596103e0d6f176d37deee0b62ab93dfbe833477cfd50e34e011093e83a59c5bc27798bf87056f5f915c6582d85470c4eec81c3f70dd297a72f500938425390de445f48cef12518991c1050a2192a94f04918940ded4698a6a15155d20d403fe6be32a3450f23e1e455ef637e9bf1e900327822cc1133996abd02c076277c7068a680a994481a3cbe1323c984d8f52c4cad86b869843fc3d2ecbed7a05228b5133632e2d7e57bdc43b11addf5a32d7db51c35e8deb19ca845fa19014d9b5aa8aeaa654081d66cb790371aaa812cdc1ff0cc0f9d6e946b5a6bac06bdb5505a77607f6f62dfdae7929268861f95f97749e21191e98c6359ae78fa90084b8176a8798ee54adf04284a7c8f93ecc317603f3f39902bcfc04290265d1387313b2513d8f4c8fd3a99f7f7d64e0a501c583ffb57a2e891c2aa9d86563b1bc7b37cda7c3c863d011361ef608a5be572bf1730c0ab7ff899e5518e9b4e5f980ca8845c352a71ffd23f286585f6c3a45f4a7436fe05f6c430d77b61d31817de942c026cdbb11571d25bbd526dd52e5788c8dc649a61fdac7317f51cce338b6a02234e1736115b0051943479693c1288eeecfa9334c58b664a9c65c14745884dd3e6036cf7a5c73cf27c384ef64932f28c1332944dc45bb79402927357b84ecce8454e4af8f7b64076d65c5baeb15df29828243b24588eee461a745ac5b141ca7c54f383936e7139729d7e77db4e0f14ba63ecfa2bce16c61afddd56125cd65cad2b02764b66a7511b3206d739e4e3a0069d8c344c3de292e9bd9c83739accf05fce873fec41dd057f57d74cfd1793091416357e90e90602100262ab32ebf0e10fbf311f15be043314df1a6f045d41d66d24541181c679dbcaeb9b03a94cea9ce45cbc6fdc4032151375b1776f3ed4a5027a915a7da1ab46e2f4e7388913129842db8ecac0c62cb0cc43223bbda88b7dfadcdcdabe59c31b2e440bb4d79d485770f31d5af2f50f713753362140d520b388b18184b8b882283598a117f0b28e8bba419cf9bdcc8d7f6915aafa699547e84a89e5d612dd04a74e21aa0c7dfba26f23e37450c620eca7188ffdebbfa8b5aa9205cd24c8dadfb195a73199e4d87b2fde4e3c0b630efa751324e5a0fa76f4fc9ded37490b0ee3f16cb101f275d0dddb99d379fca3c01e97863f15a3986e0a284411353ae19ba0a1f75c8a6a3c87e8fe7d28e4e689491bbf0ae9be2fd88cbd521004abb700a908dea74068642255e9e8b0ce2b01fb6fe4cf5b72dd3d48b6bb1eb368daa31410d07e880a9b9fc0915cb2aa38fba274cd8599217c99504fb808dc928bfee72e6460a33c290e012fd71ba9cb0c96c31b0ae7e691e504621e3d77fb7c679ded79b88c42cc90e9f69b0b7000d10e7d3c61700982df04906b8b52b61297d61c5c4313a5a6a2c930d5ff2d9ec26f93d0147564d8cdbd6b49d0320e4a425253ab215dca7a71df72f3c27a0daab4ad998f154a8758b262bd6149f8f37d085cf6572fe6e14327923f9d47f20df06c3941f14d71a8dc6ce981c937bc3ac8bc7644580dc1c12c2fd4e16a8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">嘿！伙计, 看看你的通关文牒</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022-10-7傍晚</title>
      <link href="/2022/10/07/%E6%97%A5%E8%AE%B0/2022-10-7%E5%82%8D%E6%99%9A/"/>
      <url>/2022/10/07/%E6%97%A5%E8%AE%B0/2022-10-7%E5%82%8D%E6%99%9A/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="口令不对, 您还是打道回府吧." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a22c54b28b6798de67803833fc70a9e222ea02f5b81ac9408912012c55c0d996">c6794d29664f18bbd60ca66a73ffeb76e4d7e1fb4129c61ea1a0a3fabec6a307da1c5ad5c7f08763e1f3133be5e6bb0edc0c9d5516d394210913e1925740224589e7521b443c24596969d2323ca21e557b3aa6e057101d3cf588241df65d02927ce893deeca51d978f6a7d2bd73d29a372e8d44ba9aebbd94c0b642a0807601dac73cb0a11a696063c208d2648f95ab0a5f57ecb51c4d7f3dbdba805d34953d58a2e34356a32f7c96246761b671a7a375bc16211519e4e21559b644ddcae5a3ea30080bf8b262e30db1966fd1654bf0b593d777aaed62ca319f6788f8c21f01fbc59c4327383cafff898c89d19e8a69540cdd8797b6f90f5e771b1552b9f51a0f394ba1f24d7bd53fb83c60eb99de648649a38096dfac7c2d0444e0f6cb990d5ee24d2a22266c1d9ddbafb4068dc2a0319b6202433f849635e62065a853ce37167cc2a7926db97e9254985738151adf4f95f4f83758e2e42c09dd7bed8c046e91bd5251a4f08df33e69c34c847a9a8faf86ad109e2550c666ea8320211fe8df040813db5b84c0b70a0316578cfe586ade38bf9ceb94196914479871bd3898fdd10910b5f2762a423b6230654c00144930c6682cb8536b28893bb8562cd68d8668ce5e0b7760dfacb7ea15b1ca2fbe9e43a7ca7fb0973a2013a023dc3a80a9701f6332b59ce2a009a5b9b40bde789f153d4437cd0482b6787f3dd426596236d7ddd1bc55a1d6cedd754bb891308d427387edae5e11b602433b05e294da7d65b97398b2cba42ea62e3fdd8deccad4bb9578cad1e265062c2ed236c13fbcffc2f04b862777faf918950f87a5fe18dc4c46e621cddef40f457717f7e033930f50d0b83f31a2534ad1e5116c8f8e85eb17ecd07c603d9a88382b871d22901d0c2291e0d6fd4d62404dbc16b0140bd0a9beb73a62767b8d15c0a13f29c9fd037522fa06045c8909cbd9a061a6ec5e2c308a6be96f166f349b2a39c505089558d9ad73f6d42ff46412f319bba54c172bd08c7368b40eb9446f10e88c40ac2fd73f8f2c0e62e48cba29bcb6ef48dadc0ec5e72eff51867a8ad88af96b358dbb6392ca232df7e8f138bf19c46b3b0324eceeb02747d533778c998522ce282d597fd9748472e889eda1b11b63a2fdfd47a6990966a65b3943ccf8fc5ff21b98f4617d082a3a7a98a3c6b6f5af76a7c9ab7824671e85fde8457334567ea53d72431219b770bffa74c63a33d24e9854081d93c22e8112115fc4a05c13469a4c90fa79aa72f1ee5e26e983d43a86279be10a54add869a880738a039d55db0519199cbdbffb44a86342c3ccc7658d700e9a1353d87de5fe4100153f2587889eb68414be594730b668112c7e86ba7944533d4d0297288580aea8c9db099ddcaf29b1d7be667b6672c08084a0f95132407bbe02e445f7567774a4dca1107523c7b5e24c3cba6c762ca8810bd69da390957543c1bff39cc58f304c7078f78a9a67f782ac13f948f120c6c7b5ba2cb848dbfeda472012a877fe51bb3a3e1a7622908c57c98b9fb526e2943b82069e71985e0fa1d89621b63bec3c4b2a5b82c31913ae751c88fa226c2b6e9bcf37e959bc0492c683cd6e4a97582c18964179cee2b2e349e394ce5a673faa929853e1c6580c332d872329e5468d30d148158951c9418c5a850e37e97a96f198819db20192502f5f4f88efc0967</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">嘿！伙计, 看看你的通关文牒</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022-10-7白天</title>
      <link href="/2022/10/07/%E6%97%A5%E8%AE%B0/2022-10-7%E7%99%BD%E5%A4%A9/"/>
      <url>/2022/10/07/%E6%97%A5%E8%AE%B0/2022-10-7%E7%99%BD%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="口令不对, 您还是打道回府吧." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7177686c5c1652de5ac60f13165aa605ca46810b101489bad789648d0e4a5ff2">c6794d29664f18bbd60ca66a73ffeb76e4d7e1fb4129c61ea1a0a3fabec6a3077f70de7dd4493a36cbcc2656bb2193673ab7fa9b0590038bf848fbc63f572e2abc5e7f1c35a6200205cb0330fef6fcd1c8ab41ac613a37e04a0ba8e6053733f213b6ab9e23cda0d9d77a44a69d4e1fb82d0043f1b3945a366a9dc8454c56ad6eb1907e0fd1dbcbde70ddf47331e2a7eacb4c7546442061660c40d957f9e5138a91a829505f7b014ab46b2e5c09d18feb52ea72305d5a49abd077f07a3d5dc746f6f9c03941eb28901d45ee432cd08167cdafeae6aee0516c3416f38d23cdcaa0e63ad9f63a91fa11a9ee9898b867b055abb974a994897e2e01f502a65ce6c1e5d4d75a7f7a203d67338daa3d8c165050363c47dee1cf59d7840cb17e46d9dce91ae524d25ad735041dace1d45ef144856f593c8a5d1bfc87b7908ae8555d33f6684ec310ac9150244529326bec015162d7fd6d61404b81c8e54b7a02bf1560dbeb591f9b0e66f008cb8c376023825b24b9024c8724bf9665bb2b4f1e0360709d8971c156255fc73456e1272d3104464aef6b73a34d6231499c4663b54e5b0b8a0235c3eef329c487f868adfb7e602f511b920170d1f20332bf8f735eb6a5466c5d5d5cd339e147f6b74a50a339c02fbc9b02a1165ddfe58f74d4c1dac9d125e19df4df935826f75a56c4d73188c6f8cc4f8c617ce2572e458aa795807cc6c223d30ecdfd85a0929f191101ab0eed0edf1e2e74b96bca81c82d51657293a1ae120605399e38f391e8091a4d0d7553e621ab327ab2c55979202d5a803cd45ee51b3ac26c57b558f2f2898319b01fa9c629a49fdf44ae6f707123d781763cea58896bc3082cb4f4ecddd76f862e6cb7cd72f6f29d0f6028fa721fd42d7d892ae1543cbac433c3da7a774a70e01a440929d5f4a8402c6937398ce299cb342d6f844d25415922f46c8d444181a60f3ca5717f8237a7a52903b22d8f62d73c72b0cdd7ae20fa311a82dd64bfc45e864ed53eb12dcfda134731a42bb4d07687a6621583459b6e9a342e3ff9913dd6357247598a85a1e136da48f6d1b0f14d632cd6d03bd22404669aa2f572b2b7e9161ad0cee06c993fea197675f3cb73fff8b36e9a2e3a30da837a140bec0ef0178853a5c842669ceaef71353829a5fcdd4d21cc758b68174d2d03d4cb926e37938c84edd95b5040ddf6e64d37ce7fa3c007957c5d2a2f78aa52c6c0dbe811e7e24466cf407ee732ea98e30979f93176aeeb1b502acf299da20628e79286010386296dd923e1f0158c45a24dcad91f9497e954d2be186a4e3faea8c475203f7186f910484571cef397e21de2a67903e41efa0472c652d8c183b83ec1f5f18c2e4567c0e4951528fd894579a72f2170007067e34e159bddd78194b19f9c7c073ce3df90b36a2edd1f7be94dc3f8e0fe6e1566cea7ccd1d5c2bd32568f90aba622c75c9c7e532f20ff11f67c6958ae2661ca69e272473f1bcf3c6e0d5c23555f7293321e9cd97cb13fa6f3fac86ec8ca1233d031db3055fda85cedb69d60c9dea98d4341f614caf88a23f50c7f980406d7a4dd0dcec6eb4fd5c7bc1cd2f6ecf3036ae11dafcd00439490a6fc492d2798924343a6f383910878fa8f854728aef1eafbc72a4e6079afddfbf52fa92d27e885fa085affd43660edb65fe6f66266fca264c05a4539f89733fc391a642665cf947f699907e2cd58efcabad33478ccc8daf5c7a63b0cb0e29cdc5abcb729375d1463e090c470f92f79e508292dfda04c00ad7d1acf363f6e317981d8d03185f4bd0eb89c70b79f7dabe74b753be4b362888e61dd7d4332d9f161fe81bb28c2949d8efec091fb4f8918423944b2f068323b18a76b506bffca618f731bfa324e56648ff07a70905c4aa802bfd01bca680eec4eb893f852b1f9984cda32eb3271912d5b716e598d150e156402d58d236c3e955c9b01c12297222c7edcf125c766d2e6217a1c2600f95f0aa4d4689fe05f720cc3b5b259eb744ff37fa4b0b8d5f8e8ab3f4f7208c859eb902e12e87e4073556590db108921e0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">嘿！伙计, 看看你的通关文牒</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022-9-12晚有感</title>
      <link href="/2022/09/12/%E6%97%A5%E8%AE%B0/2022-9-12%E6%99%9A%E6%9C%89%E6%84%9F/"/>
      <url>/2022/09/12/%E6%97%A5%E8%AE%B0/2022-9-12%E6%99%9A%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="口令不对, 您还是打道回府吧." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="94cff8d299cecca73cac76c8caef622fadbebe9aaa8e1e6a964883c0a860c42c">c6794d29664f18bbd60ca66a73ffeb76a26e7929c41dad52774387a209bb553da411cc8e0f26d12a686cc5a95a55db98cba74b5a2100bbce35c47fc28ee0696bb73ae5bf029c6145093e422e5b9ee07cf18f8ae80614d93248340788a0b20ebb3adb7a65f19ef84fe59e09ab876a2c3aceb1bee29041a55f3a6a6c73a0483589a73ecd73a9138108f62a20f4be8421e14f88b4f76962d9e41c6090c6d11ad7d1c8253bfe4fd76e6b332706c4f1b3e824b240f0facb63354d1e7b8141c2909489f7b611815e448f94a597434cd3181d62d1d34885ea39e21b6c563f1c6cb2e88d5566a0032f7442365906c52086ad3c0cb33c27f432c3446ee6c84558e8bfcccbeb871b6745e8ba4aac272c50f3189e1b6e67fc23827acb0d3be0107e1c810e8b2008239deba8f5b4c62169c8a7b32f0ab436c1cf93e079fbd062dd3475a98d07f784c04d30cae4d4c1c0257b9dfe27974ebb29c0bc364cfc682dda4002512827ea6a0e7e7c1737306794fa154f6cab85f338ced4a80502dd8d0ee7bc57e299ebb50314f1570c151ae0a6099fb4f8db883cbcc319ebca47f4812a8b0957004c2031fd534d64f85ed97b12a75d7315f0cb0c64ad3dce7179bf57ae3e440e103b083b2e1a3a01c74ec0c7bcc88323c798f2e93ffdd4e8b287117203a8440dd802005dc8fe3f73929951099c3c74b3d5dc0fb79af6cfb553fe1fb306a692e161b0bb4e771ba964291bd40b77f7ed6ebfc7e1d98c5ece92df96581d5dc75ae8d3a05e691b9254d81f9ec61d5cc884044119c3f199024a33040fd1bab1039a05efbe7213c1c7bf9bee9ffe8e2528e5cbd9109a7b7a6bcc4826e38fc92e2059291e5af1f1b2094d7456130a054c8359537736e2e5b3524509671e3a0975a563985b07c1d337276e9048087fc783b37ede8e9147c05d4f683bf963649b12a670676a20800646c135ab7b67d58b6e41571a2668323f4d2cb2a4ccf450252b0ab8303282214b36c54f77df6ccabdd7f6af67e1295e071259831f1cccd6971bafe980d7cd41edfc73a4080eff44862a2f69c88b42b5ad6190c1e1edc531a72a41dfd77e9d63ab300162e5b391b15f34b0ef691205f571f759a5347a9e87588e367cd51d4736c97cf68536bb9b0cabc2b5096ccd1120f09af537cb2e27987e0d8e6bc04b3d5797110e7eb5cef4a4e0e3b78807aeb74cf180e4e1c37be54adf3d29742a1f8f92fa60249fd394de25cb584a89192b51c01062371697347a28eb415c821cc494e791549df7be199a15713e18ca053b18359fb8f33d6f5ce3e2d24b102bb8b756b9250fb3bf052ae4d114b4110d6295505f514f5dba1f424c9ee97dba13088a37750cf6c6c088d4239529d17b61618e89582b0411f1e5eeaa2746d9e51ad6036056891189ae5aa234f975af1bc87bcbe1e52467c7c4f9947178ad93feb062ab6158c14aba541cbe695cf55b31123721a145cf450f74820740c0f522c28336e506ab6ec3c1db4c8939e16e5bd84dd1845ba86512fc8e50e2dba2d8ac0fdf58d2eb4039c7d5ef8d9fd8a0d1f331350e3b26a43026e3533809819bfcbd477482d4ca574169275c462ed31f1ac0ea21ea91196f5416462612ba48f7af34c5f3d8068ed78f7d5d5fe1f261e305a9c3bb027fa5112b40662286ef5a249e11b1290ee4fd99c2a90e614619590a4cf45a1cec29773d9158b05c7c60c98566f7501802be6517d0c0f11a991c674000b0a447986997c505d869b691d7580d33a39e947c38a1d22e0dce850d0a3372d03b2ba584af93b179126231c839401956dbcbb5a4d824e8e2c9e807aec865c1525fd9773c8d33b31d365a8613e345b0ed6e6be3d0d90d441f72ec06efa9c6fe450dacd54b7a22703c3ff0f4106cfaffe4f32e9bdaac0300410c64924561aae2fff6e154660abc1d1207ca6614f6e11dab87c4d152aefce7074fab5d2dba11457440fff18d512490157129d1846c18156e9e6dd6954fc028f6288474354fab677779b523af00ec97fcc2991f666e66d2bed75ded9487822b3e381caad1d91170adc299a4df66514ff4461c13f849cd125bce713c6e8e786299bc166c0ae67909c649409897683a46d355b8bb97f8f5bab09f8550a700206cf58645274afec286a7354ba2a308d835268442b102b4129b01c08d79d98ded75beacc29eda47f55b7a786cf1a3f2740559bb6eb2902b0b801c92cd7e354a3685047d4d05dc0f8dd16b63068bdefe6dfe462d677cd6e2132063ea24b77beff8c82a8a4cc87be5c2170571e684d0ab6a55a905ff6491bdd23fe32775c5fd8e3bce82d09d7afe5f10b2b43db088361f112c74fd3959cb3d118d8182a77280a4499c8f9e8ef998d8fa63658f2723105ae7bb5a9fff5564acd5f41505a01b9415b35e4ca99017761b9021846145b0b3ca6f57b2059533ba0c9bad1937ca47bb74b811a1ad5e96c42546c8ff150fd06f211fd7232c5789824d6a9c0745708e07bb0fe62a263da6ee9cdc8b074a5cad031a2889ff320d8a5d630afb6bac23b01fe62de77806fa2473937b82559f9002663bd8e8d63d968a9482ed116b14bbf7416b67d7c820ca06d0ba868c754aafebc8bfed0e2681070bed882c81727cd99a9c9534a7e3087edee22161945d95b96dd817fda3126155de5df3c1f6b602b66aa8375c0c573a183012f542d7e45fe958505ec1ef5fccb11cb6c8204954f2fd47d7cef290c3aa655c73ce8d02b0b1702dd955c8a7af396338a1a7d1303d7b15411a2860b4a93dde15460a1ef8efefc613baa9a874baae2849e67f6fae80233bde2b874b9cdf361638ad4745a4d019ffd32c0413add2d8a085b01f63bf2b3814172748756ffca3bf35cc52d595cf2f87cbc4419a42aec6c10f4562675d585e3ca67bc375b335eaa4664ab73bb894cddd6a5339672606bedf8367df3d11385bc7f60ba50aa241e91d2f088557f7bf394e299deb4b9c63808ed1161b057640a2ae0a76ba9c228db34584f162934c562f816068b02bcbf3d257acaabfaaf8876ee2921d38e9bbde4c7d66d79c23f7b3aebbd74f04e1e373405ca2133614ab8efddf11213dfa38e5ce2a267bce9127cb5b0088dbf1e68f002736cd5f215a5cb2149cf206024eabf44b51119219ac9f0e2d5d8066eeded5ff3e0c445082c6ab07ab8f063ba01b72457186f9d45683c692b433ada010b8ae9ba3058be51d74c13ba33f77f37bdc10</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">嘿！伙计, 看看你的通关文牒</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
